// Code generated by configgen.go; DO NOT EDIT.

package config

import (
    "errors"
    "os"
    "strconv"
    "strings"
)

const (
    CASHEER_SERVER_SCHEME_ENV = "CASHEER_SERVER_SCHEME"
    CASHEER_SERVER_ADDRESS_ENV = "CASHEER_SERVER_ADDRESS"
    CASHEER_SERVER_PORT_ENV = "CASHEER_SERVER_PORT"
    CASHEER_SQLITEDATABASE_FILE_ENV = "CASHEER_SQLITEDATABASE_FILE"
    CASHEER_SQLITEDATABASE_MIGRATION_ENV = "CASHEER_SQLITEDATABASE_MIGRATION"
    CASHEER_SQLITEDATABASE_CREATEIFEMPTY_ENV = "CASHEER_SQLITEDATABASE_CREATEIFEMPTY"
    CASHEER_APIPATHS_ENTRIES_ENV = "CASHEER_APIPATHS_ENTRIES"
    CASHEER_APIPATHS_EXPENSES_ENV = "CASHEER_APIPATHS_EXPENSES"
    CASHEER_APIPATHS_DEBTS_ENV = "CASHEER_APIPATHS_DEBTS"
    CASHEER_APIPATHS_TOTALS_ENV = "CASHEER_APIPATHS_TOTALS"
)

var (
    ErrCasheerServerSchemeEnvMissing = errors.New(CASHEER_SERVER_SCHEME_ENV)
    ErrCasheerServerAddressEnvMissing = errors.New(CASHEER_SERVER_ADDRESS_ENV)
    ErrCasheerServerPortEnvMissing = errors.New(CASHEER_SERVER_PORT_ENV)
    ErrCasheerServerPortEnvInvalid = errors.New(CASHEER_SERVER_PORT_ENV)
    ErrCasheerSqlitedatabaseFileEnvMissing = errors.New(CASHEER_SQLITEDATABASE_FILE_ENV)
    ErrCasheerSqlitedatabaseMigrationEnvMissing = errors.New(CASHEER_SQLITEDATABASE_MIGRATION_ENV)
    ErrCasheerSqlitedatabaseCreateifemptyEnvMissing = errors.New(CASHEER_SQLITEDATABASE_CREATEIFEMPTY_ENV)
    ErrCasheerSqlitedatabaseCreateifemptyEnvInvalid = errors.New(CASHEER_SQLITEDATABASE_CREATEIFEMPTY_ENV)
    ErrCasheerApipathsEntriesEnvMissing = errors.New(CASHEER_APIPATHS_ENTRIES_ENV)
    ErrCasheerApipathsExpensesEnvMissing = errors.New(CASHEER_APIPATHS_EXPENSES_ENV)
    ErrCasheerApipathsDebtsEnvMissing = errors.New(CASHEER_APIPATHS_DEBTS_ENV)
    ErrCasheerApipathsTotalsEnvMissing = errors.New(CASHEER_APIPATHS_TOTALS_ENV)
)

func LoadConfig() (Config, error) {
    var config Config
    var missingVars []error
    var formatVars []error
    val_Server_Scheme, ok := os.LookupEnv(CASHEER_SERVER_SCHEME_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerServerSchemeEnvMissing)
    } else {
        config.Server.Scheme = val_Server_Scheme
    }
    val_Server_Address, ok := os.LookupEnv(CASHEER_SERVER_ADDRESS_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerServerAddressEnvMissing)
    } else {
        config.Server.Address = val_Server_Address
    }
    val_Server_Port, ok := os.LookupEnv(CASHEER_SERVER_PORT_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerServerPortEnvMissing)
    } else {
        parsed, err := strconv.ParseInt(val_Server_Port, 10, 32)
        if err != nil {
            formatVars = append(formatVars, ErrCasheerServerPortEnvInvalid)
        } else {
            config.Server.Port = int32(parsed)
        }
    }
    val_SQLiteDatabase_File, ok := os.LookupEnv(CASHEER_SQLITEDATABASE_FILE_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerSqlitedatabaseFileEnvMissing)
    } else {
        config.SQLiteDatabase.File = val_SQLiteDatabase_File
    }
    val_SQLiteDatabase_Migration, ok := os.LookupEnv(CASHEER_SQLITEDATABASE_MIGRATION_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerSqlitedatabaseMigrationEnvMissing)
    } else {
        config.SQLiteDatabase.Migration = val_SQLiteDatabase_Migration
    }
    val_SQLiteDatabase_CreateIfEmpty, ok := os.LookupEnv(CASHEER_SQLITEDATABASE_CREATEIFEMPTY_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerSqlitedatabaseCreateifemptyEnvMissing)
    } else {
        parsed, err := strconv.ParseBool(val_SQLiteDatabase_CreateIfEmpty)
        if err != nil {
            formatVars = append(formatVars, ErrCasheerSqlitedatabaseCreateifemptyEnvInvalid)
        } else {
            config.SQLiteDatabase.CreateIfEmpty = parsed
        }
    }
    val_ApiPaths_Entries, ok := os.LookupEnv(CASHEER_APIPATHS_ENTRIES_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerApipathsEntriesEnvMissing)
    } else {
        config.ApiPaths.Entries = val_ApiPaths_Entries
    }
    val_ApiPaths_Expenses, ok := os.LookupEnv(CASHEER_APIPATHS_EXPENSES_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerApipathsExpensesEnvMissing)
    } else {
        config.ApiPaths.Expenses = val_ApiPaths_Expenses
    }
    val_ApiPaths_Debts, ok := os.LookupEnv(CASHEER_APIPATHS_DEBTS_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerApipathsDebtsEnvMissing)
    } else {
        config.ApiPaths.Debts = val_ApiPaths_Debts
    }
    val_ApiPaths_Totals, ok := os.LookupEnv(CASHEER_APIPATHS_TOTALS_ENV)
    if !ok {
        missingVars = append(missingVars, ErrCasheerApipathsTotalsEnvMissing)
    } else {
        config.ApiPaths.Totals = val_ApiPaths_Totals
    }

    if len(missingVars) > 0 || len(formatVars) > 0 {
        var verr error
        if len(missingVars) > 0 {
            verr = errors.Join(verr, MissingEnvVarsError{vars: missingVars})
        }
        if len(formatVars) > 0 {
            verr = errors.Join(verr, InvalidEnvVarsError{vars: missingVars})
        }
        return Config{}, verr
    }

    return config, nil
}

type MissingEnvVarsError struct {
	vars []error
}

func (m MissingEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m MissingEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " are not set"
}

type InvalidEnvVarsError struct {
	vars []error
}

func (m InvalidEnvVarsError) Unwrap() []error {
	return m.vars
}

func (m InvalidEnvVarsError) Error() string {
	if len(m.vars) == 0 {
		return ""
	}
	varsstr := make([]string, 0, len(m.vars))
	for _, v := range m.vars {
		varsstr = append(varsstr, v.Error())
	}
	return "envs " + strings.Join(varsstr, ",") + " have an invalid value"
}
