openapi: 3.0.3
info:
  title: Casheer
  description: |-
    This is a money transactions manager.
  termsOfService: http://swagger.io/terms/
  contact:
    email: qscxzsewqazxcde@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
paths:
  /debts/:
    get:
      summary: List all existing debts
      description: This operation will list all existing debts.
      operationId: listDebts
      parameters:
        - in: query
          name: person
          description: The person in the returned debts must match the parameter.
          required: false
          schema:
            type: string
            example: John Cena
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "./components/schemas/debts.yaml#/Debt"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "http://dumblinks.com/debts/"
                      home:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "http://dumblinks.com/home"
                          title:
                            type: string
                            example: Home page of casheer API.

        "400":
          description: Invalid debt request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: "./components/schemas/errors.yaml#/invalidQueryParamsError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    post:
      summary: Create a new debt
      description: This operation will create a new debt, given the provided debt information is valid.
      operationId: createDebts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "./components/schemas/debts.yaml#/CreateDebt"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/debts.yaml#/DebtWithLink"
        "400":
          description: Invalid debt request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidRequestBodyError"
        "422":
          description: Debt data is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    allOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidResourceError"
                    properties:
                      details:
                        example: "invalid debt: person cannot be empty"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
  /debts/{dbtid}:
    get:
      summary: Retrieve the data of an existing debt.
      description: This operation will return the data of an existing debt, given the provided debt id exists.
      operationId: getDebt
      parameters:
        - in: path
          name: dbtid
          description: The ID of the debt to be retrieved.
          required: true
          schema:
            type: number
            example: 500
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/debts.yaml#/DebtWithLink"
        "404":
          description: Debt was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    patch:
      summary: Update the data of an existing debt.
      description: This operation will update the data of an existing debt, given the provided debt exists.
      operationId: updateDebt
      parameters:
        - in: path
          name: dbtid
          description: The ID of the debt to be retrieved.
          required: true
          schema:
            type: number
            example: 500
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "./components/schemas/debts.yaml#/UpdateDebt"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/debts.yaml#/DebtWithLink"
        "404":
          description: Debt was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "422":
          description: Debt data is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    allOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidResourceError"
                    properties:
                      details:
                        example: "invalid debt: person cannot be empty"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    delete:
      summary: Delete an existing debt.
      description: This operation will remove an existing debt, given the provided debt exists.
      operationId: updateDebt
      parameters:
        - in: path
          name: dbtid
          description: The ID of the debt to be retrieved.
          required: true
          schema:
            type: number
            example: 500
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/debts.yaml#/Debt"
        "404":
          description: Debt was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
  /entries/:
    post:
      summary: Create a new entry
      description: | 
        This operation will create a new entry, given the provided entry information
        is valid. An entry represents a prediction that is uniquely associated with
        a month, year, category and subcategory.
      operationId: createEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "./components/schemas/entries.yaml#/CreateEntry"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/entries.yaml#/EntryWithLinksAndRelationships"
        "400":
          description: Invalid create entry request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidRequestBodyError"
        "409":
          description: An entry already exists for the same year, month, category and subcategory.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceAlreadyExistsError"
        "422":
          description: Invalid debt sent in request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: "./components/schemas/errors.yaml#/invalidResourceError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    get:
      summary: List all entries
      description: | 
        This operation will list all entries, based on the provided filters. It
        is strongly encouraged to specify a month and year filter, in order to
        get only the data required for the current sheet. Those query parameters
        might be required in newer versions of the API.
      operationId: listEntries
      parameters:
        - in: query
          name: year
          description: Filter by year. It is strongly encouraged to specify a value.
          required: false
          schema:
            type: integer
            minimum: 2020
            example: 2023
        - in: query
          name: month
          description: Filter by month. It is strongly encouraged to specify a value.
          required: false
          schema:
            type: integer
            example: 6
            minimum: 1
            maximum: 12
        - in: query
          name: category
          description: Filter by category.
          required: false
          schema:
            type: string
            example: Food
        - in: query
          name: subcategory
          description: Filter by subcategory.
          required: false
          schema:
            type: string
            example: Eating out
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "./components/schemas/entries.yaml#/EntryWithLinksAndRelationships"
                  links:
                    allOf:
                      - $ref: "./components/schemas/jsonapi.yaml#/jsonapiSelfLink"
                    type: object
                    properties:
                      self:
                        example: "http://casheer.com/entries/"
                      home:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "http://casheer.com/entries/"
                          title:
                            type: string
                            example: Home page of casheer API.
        "400":
          description: Invalid create entry request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidRequestBodyError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
  /entries/{entid}:
    get:
      summary: Retrieve the data of an existing entry.
      description: |
        This operation will return the data of an existing entry, given the
        provided entry id exists.
      operationId: getEntry
      parameters:
        - in: path
          name: entid
          description: The ID of the entry to be retrieved.
          required: true
          schema:
            type: integer
            example: 500
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/entries.yaml#/EntryWithLinksAndRelationships"
        "400":
          description: Entry id does not have correct format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    allOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidURLParamError"
                    type: object
                    properties:
                      details:
                        example: URL parameter "myentry" is not an integer.  
        "404":
          description: Entry was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    delete:
      summary: Removes an existing debt, given the provided debt exists.
      description: | 
        This operation deletes an existing entry together with all its expenses. 
        Be careful when using this operation! In this version, it does not
        provide a way to view the deleted expenses without peeking into the database.
      operationId: deleteEntry
      parameters:
        - in: path
          name: entid
          description: The ID of the entry to be deleted.
          required: true
          schema:
            type: integer
            example: 500
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/entries.yaml#/DeleteEntry"
        "400":
          description: Entry id does not have correct format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    allOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidURLParamError"
                    type: object
                    properties:
                      details:
                        example: URL parameter "myentry" is not an integer.  
        "404":
          description: Entry was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    patch:
      summary: Update the data of an existing entry.
      description: |
        This operation will update the data of an existing entry, given the
        provided entry exists and the new data is valid and doesn't violate any
        constraints.
      operationId: updateEntry
      parameters:
        - in: path
          name: entid
          description: The ID of the entry to be retrieved.
          required: true
          schema:
            type: integer
            example: 500
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "./components/schemas/entries.yaml#/UpdateEntry"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/entries.yaml#/EntryWithLinksAndRelationships"
        "400":
          description: Invalid create entry request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidRequestBodyError"
        "409":
          description: An entry already exists for the same year, month, category and subcategory.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceAlreadyExistsError"
        "422":
          description: Invalid debt sent in request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: "./components/schemas/errors.yaml#/invalidResourceError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
  /entries/{entid}/expenses/:
    post:
      summary: Create a new expense
      description: | 
        This operation will create a new expense that contributes to an existing
        entry, given the provided entry id and expense information is valid. The
        value of all expenses associated with an entry represent that entry's
        running total for the month and should ideally be close to the entry's
        expected total.
      operationId: createExpenses
      parameters:
        - in: path
          name: entid
          description: The entry to which this expense contributes to.
          required: true
          schema:
            type: integer
            example: 100
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "./components/schemas/expenses.yaml#/CreateExpense"
      responses:
        "200":
          description: Expense successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/expenses.yaml#/ExpenseWithLinksAndRelationships"
        "400":
          description: Invalid create expense request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidRequestBodyError"
        "404":
          description: |
            The expense collection does not exist, likely because the entry id
            is incorrect.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    get:
      summary: List all expenses
      description: | 
        This operation will list all expenses of a given entry, based on the provided filters. It
        is strongly encouraged to specify a month and year filter, in order to
        get only the data required for the current sheet. Those query parameters
        might be required in newer versions of the API.
      operationId: listExpenses
      parameters:
        - in: path
          name: entid
          description: The entry to which this expense contributes to.
          required: true
          schema:
            type: integer
            example: 100
        - in: query
          name: currency
          description: Filter by currency.
          required: false
          schema:
            type: string
            example: EUR
            enum: [EUR, RON, USD, GBP]
        - in: query
          name: payment_method
          description: Filter by payment method.
          required: false
          schema:
            type: string
            example: card
      responses:
        "200":
          description: Expenses listed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "./components/schemas/expenses.yaml#/ExpenseWithLinksAndRelationships"
                  links:
                    allOf:
                      - $ref: "./components/schemas/jsonapi.yaml#/jsonapiSelfLink"
                    type: object
                    properties:
                      self:
                        example: "http://casheer.com/entries/1/expenses/"
                      home:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "http://casheer.com/home"
                          title:
                            type: string
                            example: Home page of casheer API.
        "400":
          description: Invalid list expenses request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidRequestBodyError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
  /entries/{entid}/expenses/{expid}:
    get:
      summary: Retrieve the data of an expense.
      description: |
        This operation will return the data of an expense, given both the
        expense id and entry id are valid.
      operationId: getExpense
      parameters:
        - in: path
          name: entid
          description: The entry to which this expense contributes to.
          required: true
          schema:
            type: integer
            example: 100
        - in: path
          name: expid
          description: The expense id.
          required: true
          schema:
            type: integer
            example: 100
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/expenses.yaml#/ExpenseWithLinksAndRelationships"
        "400":
          description: Entry id does not have correct format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    allOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidURLParamError"
                    type: object
                    properties:
                      details:
                        example: URL parameter "myentry" is not an integer.  
        "404":
          description: Entry or expense was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    delete:
      summary: Removes an existing expense.
      description: | 
        This operation deletes an existing expense, given that the entry and
        expense ids are valid.
      operationId: deleteEntry
      parameters:
        - in: path
          name: entid
          description: The entry to which this expense contributes to.
          required: true
          schema:
            type: integer
            example: 100
        - in: path
          name: expid
          description: The expense id.
          required: true
          schema:
            type: integer
            example: 100
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/expenses.yaml#/DeleteExpense"
        "400":
          description: Entry id does not have correct format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    allOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidURLParamError"
                    type: object
                    properties:
                      details:
                        example: URL parameter "myentry" is not an integer.  
        "404":
          description: Entry was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceNotFoundError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
    patch:
      summary: Update an expense.
      description: |
        This operation will update the data of an existing expense, given the
        entry and expense ids are valid.
      operationId: updateExpense
      parameters:
        - in: path
          name: entid
          description: The entry to which this expense contributes to.
          required: true
          schema:
            type: integer
            example: 100
        - in: path
          name: expid
          description: The expense id.
          required: true
          schema:
            type: integer
            example: 100
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "./components/schemas/expenses.yaml#/UpdateExpense"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "./components/schemas/expenses.yaml#/ExpenseWithLinksAndRelationships"
        "400":
          description: Invalid create entry request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/invalidRequestBodyError"
        "409":
          description: An entry already exists for the same year, month, category and subcategory.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: "./components/schemas/errors.yaml#/resourceAlreadyExistsError"
        "422":
          description: Invalid debt sent in request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: "./components/schemas/errors.yaml#/invalidResourceError"
        "500":
          $ref: "./responses/errors.yaml#/unexpectedError"
